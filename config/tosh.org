#+STARTUP: indent
#+TITLE: Tosh's Emacs configuration

* About
I originally this based on [[https://dl.dropboxusercontent.com/u/3968124/sacha-emacs.html][Sacha Chua's emacs config]] which is in turn based on [[http://eschulte.me/emacs24-starter-kit/#installation][Emacs Starter Kit]].
At this point it's deviated considerably.

* Setup
First things first, clone this repo into your home directory
#+BEGIN_SRC sh :tangle no
  git clone git@github.com:toshism/.emacs.d.git
#+END_SRC

Create the appropriate directory structure to kick things off

#+BEGIN_SRC sh :tangle no
  mkdir ~/.emacs.d/elisp
#+END_SRC

In order to load this config we need to have org mode loaded, so check out the org mode src

#+BEGIN_SRC sh :tangle no
  cd ~/.emacs.d/elisp
  git clone git://orgmode.org/org-mode.git
#+END_SRC

Now we need to create the base init.el file which will then load this file.
Create the file =~/.emacs.d/init.el= and place the following code in it.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; This sets up the load path so that we can override it
  (package-initialize nil)
  ;; Override the packages with the git version of Org
  (add-to-list 'load-path "~/elisp/org-mode/lisp")
  (add-to-list 'load-path "~/elisp/org-mode/contrib/lisp")
  ;; Load the rest of the packages
  (package-initialize t)
  (require 'org)
  (require 'ob-tangle)
  (org-babel-load-file (expand-file-name "~/.emacs.d/tosh.org"))
#+END_SRC

* Configuration
** Personalization
I'm honestly not even sure where this is used, but anyway...
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Tosh"
        user-mail-address "tosh.lyons@gmail.com")
#+END_SRC

load private stuff
account settings, passwords, etc.
#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/private.el")
#+END_SRC
** Directory settings
*** Default config directory
#+BEGIN_SRC emacs-lisp
(setq config-dir "~/.emacs.d/config/")
#+END_SRC
** General emacs settings
*** Start server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
*** If linux use super for meta
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'gnu/linux)
    (setq x-super-keysym 'meta))
#+END_SRC
*** Turn off useless window junk
#+BEGIN_SRC emacs-lisp
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
#+END_SRC

Turn off menu when running in a terminal
#+BEGIN_SRC emacs-lisp
  (cond
   ((eq window-system 'x)
    (message "Running in X")
    (menu-bar-mode 1))
   (t
    (message "Running in terminal")
    (setq x-super-keysym 'meta)
    (menu-bar-mode 0)))
#+END_SRC
*** Turn off startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+END_SRC

*** Move mouse pointer when cursor is too close
#+BEGIN_SRC
(mouse-avoidance-mode 'exile)
#+END_SRC

*** Turn off annoying beep
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

*** Highlights (current line, region etc)
#+BEGIN_SRC emacs-lisp
(when (fboundp 'global-hl-line-mode)
  (global-hl-line-mode t))
#+END_SRC

keep syntax colors on highlighted line
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'highlight nil :foreground 'unspecified :underline nil)
#+END_SRC

set highlight color
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'region nil :background "#b8b8b8" :foreground 'unspecified)
#+END_SRC
*** Preserve syntax highlighting
This preserves syntax highlighting on current line when =hl-line-mode= is enabled
#+BEGIN_SRC emacs-lisp
  (set-face-foreground 'highlight nil)
#+END_SRC

*** Show line number in modeline
#+BEGIN_SRC emacs-lisp
(line-number-mode t)
#+END_SRC

*** Indent spaces
No tabs, always spaces
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

*** Show matching paren
Highlights the corresponding parentheses
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

*** Delete trailing whitespace on save
Trailing whitespace is annoying. Kills left over indentions on empty lines too
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Backup file settings
Save backup files to a single directory (=~/.emacs.d/.saves= in this case). This prevents having
=filename.txt~= files strung all over the place.

Backup by copy. This preserves ownership and has some other affects as well. If you really care
about the details see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup-Copying.html#Backup-Copying][here]].
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs.d/.saves")))
(setq backup-by-copying t)
#+END_SRC

*** Command for alt on the mac
Alt is hard to hit on the mac, use command
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'meta
      mac-option-modifier nil)
#+END_SRC
** Custom key bindings
*** Goto line number
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-g") 'goto-line)
#+END_SRC

*** Find file
Find a file instead of fill column. What a waste of a keybinding that was...
Some of the fill commands are handy though [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fill-Commands.html][Fill commands docs]]
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-xf" 'find-file)
#+END_SRC

*** Be more like readline
Set =C-w= to kill word backward like readline.
Reassign =kill-region= to =C-x C-k= since it was =C-w=
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
#+END_SRC

*** Invoke =M-x= without the alt key
I'm sort of meh... about this. I picked it up from [[https://sites.google.com/site/steveyegge2/effective-emacs][Steve Yegge's effective emacs]] post
It let's you use =C-x C-m= (or =C-c C-x= incase you fat finger it) instead of =M-x=
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)
#+END_SRC
*** Registers
make registers easier to use
**** Temporary point register
This is handy for jumping back and forth and easier than the regular register commands
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cp" 'point-to-register)
  (global-set-key "\C-cj" 'jump-to-register)
#+END_SRC
**** Text register
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-ct" 'copy-to-register)
  (global-set-key "\C-cv" 'insert-register)
#+END_SRC
**** Window register
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cw" 'window-configuration-to-register)
#+END_SRC
*** Switch window
[[*switch%20window][switch window]]
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x o") 'switch-window)
#+END_SRC
** Generic functions
Functions not tied to a mode or anything
*** Open previous line
This is really handy. =C-o= opens a new line above the current line, regardless of cursor position
#+BEGIN_SRC emacs-lisp
(defun open-line-previous () "create new line above current line, regardless of cursor position"
  (interactive)
  (move-beginning-of-line nil)
  (open-line 1))
(global-set-key (kbd "C-o") 'open-line-previous)
#+END_SRC
*** Load subconfig org files
#+BEGIN_SRC emacs-lisp
  (defun load-config (file)
    "Load a config module"
    (org-babel-load-file (expand-file-name file config-dir)))
#+END_SRC
*** Send to shell
I need to clean this up and put it somewhere appropriate.
Find and appropriate keybinding
#+BEGIN_SRC emacs-lisp
(defun sh-send-line-or-region (&optional step)
  (interactive ())
  (let ((proc (get-process "shell"))
        pbuf min max command)
    (unless proc
      (let ((currbuff (current-buffer)))
        (shell)
        (switch-to-buffer currbuff)
        (setq proc (get-process "shell"))
        ))
    (setq pbuff (process-buffer proc))
    (if (use-region-p)
        (setq min (region-beginning)
              max (region-end))
      (setq min (point-at-bol)
            max (point-at-eol)))
    (setq command (concat (buffer-substring min max) "\n"))
    (with-current-buffer pbuff
      (goto-char (process-mark proc))
      (insert command)
      (move-marker (process-mark proc) (point))
      ) ;;pop-to-buffer does not work with save-current-buffer -- bug?
    (process-send-string  proc command)
    (display-buffer (process-buffer proc) t)
    (when step
      (goto-char max)
      (next-line))
    ))

(defun sh-send-line-or-region-and-step ()
  (interactive)
  (sh-send-line-or-region t))
(defun sh-switch-to-process-buffer ()
  (interactive)
  (pop-to-buffer (process-buffer (get-process "shell")) t))

;; (define-key sh-mode-map [(control ?j)] 'sh-send-line-or-region-and-step)
;; (define-key sh-mode-map [(control ?c) (control ?z)] 'sh-switch-to-process-buffer)
#+END_SRC
** Mode specific settings
*** packages
#+BEGIN_SRC emacs-lisp
(load-config "packages.org")
#+END_SRC
*** ibuffer
#+BEGIN_SRC emacs-lisp
(load-config "ibuffer.org")
#+END_SRC
*** orgmode
#+BEGIN_SRC emacs-lisp
(load-config "norang-org.org")
#+END_SRC

my original org config that is disabled currently while i try to move to a setup based on norang.
#+BEGIN_SRC emacs-lisp :tangle no
(load-config "orgmode.org")
#+END_SRC
*** magit
#+BEGIN_SRC emacs-lisp
(load-config "magit.org")
#+END_SRC
*** Emacs iPython Notebook
This is broken. Seems to be an incompatibility somewhere between versions of websocket.el, ein, and ipython >= 1.


#+BEGIN_SRC emacs-lisp
  (load-config "ein.org")
#+END_SRC
*** ido
**** enable ido
#+BEGIN_SRC emacs-lisp
(ido-mode t)
#+END_SRC

**** enable flex matching
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
#+END_SRC

**** disable automatic file search
I find this rarely helpful and often annoying when trying to create a new file
#+BEGIN_SRC emacs-lisp
(setq ido-auto-merge-work-directories-length -1)
#+END_SRC

**** keys combo for ido matches                                 :disabled:
don't have this worked out exactly how i want yet
http://repo.or.cz/w/emacs.git/blob_plain/HEAD:/lisp/ido.el
#+BEGIN_SRC emacs-lisp :tangle no
  (defun ido-my-keys ()
    (define-key map  'ido-next-match)
    (define-key ido-completion-map " " 'ido-next-match))
#+END_SRC

*** uniquify buffer names
<n> is not very useful
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
#+END_SRC

set =uniquify-buffer-name-style= to forward.
makes buffers include part of the file path before the name
#+BEGIN_SRC emacs-lisp
(setq uniquify-buffer-name-style 'forward)
#+END_SRC
*** projectile
#+BEGIN_SRC emacs-lisp
(load-config "projectile.org")
#+END_SRC
*** skewer                                                       :disabled:
live page reloading and js evaluation in emacs. sort of a slime-ish thing for js/html/css
looks pretty awesome. alternative to swank-js.
- https://github.com/skeeto/skewer-mode
#+BEGIN_SRC emacs-lisp :tangle no
(load-config "skewer.org")
#+END_SRC
*** jabber
#+BEGIN_SRC emacs-lisp
  (load-config "jabber.org")
#+END_SRC
*** switch window
I like to split windows.[[https://github.com/dimitri/switch-window][switch-window]] makes it much easier to jump around
#+BEGIN_SRC emacs-lisp :tangle no
  (ensure-package-installed 'switch-window)
  (package-initialize)
#+END_SRC

*** pyenv                                                        :disabled:
eh... virtualenvwrapper seems better
#+BEGIN_SRC emacs-lisp :tangle no
  (ensure-package-installed 'pyenv-mode)
  (package-initialize)
#+END_SRC
*** virtualenvwrapper
#+BEGIN_SRC emacs-lisp
  (ensure-package-installed 'virtualenvwrapper)
  (package-initialize)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (venv-initialize-interactive-shells) ;; if you want interactive shell support
  (venv-initialize-eshell) ;; if you want eshell support
  (setq venv-location "~/.virtualenvs/")
#+END_SRC
*** anaconda
#+BEGIN_SRC emacs-lisp
(load-config "anaconda.org")
#+END_SRC
*** Helm
#+BEGIN_SRC emacs-lisp
(load-config "helm.org")
#+END_SRC
*** web-mode
This works much better with django templates, which is what I'm editing 95% of the time.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
(load-config "flycheck.org")
#+END_SRC
*** sql-postgres
User brew installed psql
#+BEGIN_SRC emacs-lisp
(setq sql-postgres-program "/usr/local/bin/psql")
#+END_SRC
*** expand region
#+BEGIN_SRC emacs-lisp
  (ensure-package-installed 'expand-region)
  (package-initialize)
#+END_SRC
**** keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
*** multiple cursors
#+BEGIN_SRC emacs-lisp
  (ensure-package-installed 'multiple-cursors)
  (package-initialize)
#+END_SRC
**** keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC
*** Dired/+
Open a new dired buffer showing only marked files from current dired buffer
#+BEGIN_SRC emacs-lisp
  (defun tl/dired-from-marked (x)
    "Open a new dired buffer showing only marked files from current dired buffer"
    (interactive "sEnter dired buffer name: ")
    (dired (cons x (dired-get-marked-files)))
  )
#+END_SRC

add marked buffers to existing dired buffer
#+BEGIN_SRC emacs-lisp tangle: no
  (defun tl/dired-add-to-buffer (x)
    (interactive "P")
    )

#+END_SRC
**** scratch working
working on helm extension to add files to a custom dired buffer
http://wikemacs.org/wiki/How_to_write_helm_extensions

see here https://www.youtube.com/watch?v=XjKtkEMUYGc
^^ around 9:00 or so he brings in helm
#+BEGIN_SRC emacs-lisp :tangle no

  (setq some-helm-source
        '((name . "Select dired buffer to add")
          (candidates . buffer-list-helm)
          (action . (lambda (candidate)
                      (message-box "%s" candidate)))))

  (helm :sources '(some-helm-source helm-source-buffer-not-found))
  (helm :sources '(add-files-to-dired tl/helm-source-buffer-not-found))

  (remove-nils (buffer-list-helm))

  (defun buffer-list-helm ()
    (remove-nils (mapcar 'format-buffer-for-helm (buffer-list))))

  (defun remove-nils (dired-buffer-list)
    (delete nil dired-buffer-list))

  (defun buffer-display-cons (buffer)
    (cons (buffer-name buffer) buffer))

  (defun format-buffer-for-helm (buffer)
    (if (string-equal (buffer-mode buffer) "dired-mode")
        (buffer-display-cons buffer)))

  (defun buffer-mode (buffer-or-string)
    "Returns the major mode associated with a buffer."
    (with-current-buffer buffer-or-string
      major-mode))

  (defun list-dired-files ()
    "Return a list of files (only) in the current dired buffer."
    (eval-when-compile (require 'cl-lib))
    (require 'dired-aux)
    (let (flist)
      (cl-flet ((fpush (fname) (push fname flist)))
        (tl/dired-map-dired-file-lines #'fpush))
      (nreverse flist)))

  (defun tl/dired-map-dired-file-lines (fun)
    ;; Perform FUN with point at the end of each line.
    ;; FUN takes one argument, the absolute filename.
    (save-excursion
      (let (file buffer-read-only)
        (goto-char (point-min))
        (while (not (eobp))
          (save-excursion
            (and (not (eolp))
                 (setq file (dired-get-filename nil t)) ; nil on non-file
                 (progn (end-of-line)
                        (funcall fun file))))
          (forward-line 1)))))


  (defun get-dired-files (dired-buffer)
    (with-current-buffer dired-buffer
      (dired (cons "custom dired" (list-dired-files)))))

  (setq add-to-dired-file-list
        '((name . "Select dired buffer")
          (candidates . buffer-list-helm)
          (action . (lambda (candidate)
                      (with-current-buffer candidate
                        (let ((new-files (cons (list-dired-files) (dired-get-marked-files))))
                          (dired (cons "ettesttest" new-files))))))))

    (cons (list-dired-files) (dired-get-marked-files))

  (defun tl/test ()
    (helm :sources '(add-to-dired-file-list helm-source-buffer-not-found)))


#+END_SRC

*** yasnippet
#+BEGIN_SRC emacs-lisp
  (ensure-package-installed 'yasnippet)
  (package-initialize)
#+END_SRC

enable globally
#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
#+END_SRC
*** eshell
custom prompt
#+BEGIN_SRC emacs-lisp
  (defmacro with-face (str &rest properties)
    `(propertize ,str 'face (list ,@properties)))

  (defun curr-dir-git-branch-string (pwd)
    "Returns current git branch as a string, or the empty string if
        PWD is not in a git repo (or the git command is not found)."
    (interactive)
    (when (and (eshell-search-path "git")
               (locate-dominating-file pwd ".git"))
      (let ((git-output (shell-command-to-string (concat "cd " pwd " && git branch | grep '\\*' | sed -e 's/^\\* //'"))))
        (concat "["
                (if (> (length git-output) 0)
                    (substring git-output 0 -1)
                  "(no branch)")
                "]")
        )))

  (defun tl/eshell-prompt ()
    (concat
     (with-face (curr-dir-git-branch-string (eshell/pwd)) :foreground "cyan")
     (with-face (eshell/pwd) :foreground "green")
     (with-face "\n")
     (with-face "$" :foreground "red")
     (with-face " " :forground "white")))
  ;; (setq eshell-prompt-function 'tl/eshell-prompt)
  (setq eshell-prompt-function (lambda () (concat venv-current-name ": " (eshell/pwd) " $ ")))
  ;; (setq eshell-prompt-function ''#[0 "\300\301 !\302 \303U\203 \304\202 \305P\207"[abbreviate-file-name eshell/pwd user-uid 0 " # " " $ "]3 "\n\n(fn)"])
  (setq eshell-highlight-prompt t)
#+END_SRC
*** jinja2 mode
#+BEGIN_SRC emacs-lisp
  (ensure-package-installed 'jinja2-mode)
  (package-initialize)
#+END_SRC
*** js2 javascript mode
#+BEGIN_SRC emacs-lisp
  (ensure-package-installed 'js2-mode)
  (package-initialize)
#+END_SRC
*** slime
#+BEGIN_SRC emacs-lisp :tangle no
  (load-config "slime.org")
#+END_SRC
*** Kill-ring clipboard for terminal
#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/elisp/pbcopy.el")
  (require 'pbcopy)
  (turn-on-pbcopy)
#+END_SRC
*** psql command
#+BEGIN_SRC emacs-lisp
(setq psql-command "/usr/local/bin/psql")
#+END_SRC
*** Add brew stuff to execute path
#+BEGIN_SRC emacs-lisp
  (setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC
*** Theme
This is not really mode specific but it needs to be run after the packages config

make it pretty
#+BEGIN_SRC emacs-lisp
  (ensure-package-installed 'moe-theme)
  (package-initialize)
  (require 'moe-theme)
  (load-theme 'moe-dark t)
#+END_SRC
*** Custom modeline
#+BEGIN_SRC emacs-lisp
  (ensure-package-installed 'powerline)
  (package-initialize)
  (powerline-moe-theme)
  ;; (Available colors: blue, orange, green ,magenta, yellow, purple, red, cyan, w/b.)
  (moe-theme-set-color 'green)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (setq-default mode-line-format
        (list
         ;; little breathing room
         " "

         ;; @ if we are editing a remote file
         ;; - if we're local
         (propertize "%@" 'face 'font-lock-warning-face)

         ;; the buffer name; the file name as a tool tip
         '(:eval (propertize "%b " 'face 'font-lock-warning-face
                             'help-echo (buffer-file-name)))

         ;; line number
         "@ L:" ;; '%02' to set to 2 chars at least; prevents flickering
         ;;(propertize "%02l" 'face 'font-lock-type-face)
         (propertize "%02l" 'face 'fg:erc-color-face8)

         ;; relative position, size of file
         "    ["
         (propertize "%p" 'face 'font-lock-constant-face) ;; % above top
         "/"
         (propertize "%I" 'face 'font-lock-constant-face) ;; size
         "] "

         ;; is this buffer read-only?
         '(:eval (when buffer-read-only
                   (concat "["  (propertize "RO"
                                            'face 'font-lock-type-face
                                            'help-echo "Buffer is read-only")
                           "]")))
         ;;"] "

         ;; the current major mode for the buffer.
         " ["
         '(:eval (propertize "%m" 'face 'font-lock-string-face
                             'help-echo buffer-file-coding-system))
         "] "

         ;; global mode string, used for notifications and org clock time etc.
         'global-mode-string

         " "

         ;; show the currently activated virtualenv
         "["
         '(:exec venv-current-name)
         "]"

         " "

         ;; was this buffer modified since the last save?
         '(:eval (when (buffer-modified-p)
                   (concat "*"  (propertize "Mod"
                                            'face 'font-lock-warning-face
                                            'help-echo "Buffer has been modified")
                           "*")))

         ))
#+END_SRC
* Tasks [4/6]
This is personal stuff and can be ignored
** DONE figure out how to load external files
for splitting out my mode specific stuff etc...
   - is it just like =(org-babel-load-file (expand-file-name "~/.emacs.d/config/tosh.org"))= ?
** DONE setup org mode
- State "DONE"       from "TODO"       [2014-08-01 Fri 19:30]
** DONE try out python-django.el
   - State "DONE"       from "TODO"       [2014-07-23 Wed 00:42]
http://from-the-cloud.com/en/emacs/2013/01/28_emacs-as-a-django-ide-with-python-djangoel.html
** TODO improve load-config function
*** TODO allow file argument to optionally have extension
    - check if file argument has .org or .el extension
    - if no extension first try to load a .org file
    - if .org not present load .el file
      - not sure how this will work with babel compiling .org files to .el...
** DONE setup auto installing of packages
   - State "DONE"       from "TODO"       [2014-07-22 Tue 17:25]
   - http://stackoverflow.com/questions/10092322/how-to-automatically-install-emacs-packages-by-specifying-a-list-of-package-name
   - https://bigmac.caelum.uberspace.de/paste/ensure-package-installed.html
** STARTED setup ein
- State "STARTED"    from "TODO"       [2014-07-24 Thu 19:11]
- annoyingly ein doesn't seem to support ipython 2.x yet
  in fact i can't seem to find any combo of websocket/ipython that it does support currently
meh... lot's of problems with version compatibility
