#+TITLE: Org mode settings

* Keybindings
** clock keys
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i") 'org-clock-in)
(global-set-key (kbd "C-c o") 'org-clock-out)
(global-set-key (kbd "C-c g") 'org-clock-goto)
(global-set-key (kbd "M-P") 'org-metaup)
(global-set-key (kbd "M-N") 'org-metadown)
#+END_SRC
** store link
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC
** capture
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC
** agenda
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-ca" 'org-agenda)
#+END_SRC
** switch between org file
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC
* Configuration
** todo keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "IN PROGRESS(i)" "STARTED(s!)" "|" "DONE(d!/!)")
              (sequence "WAITING(w@/!)" "SOMEDAY(S!)" "|" "CANCELLED(c@/!)"))))
#+END_SRC
** agenda
*** agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/dev/notes/gannet.org"
                               "~/dev/notes/natgeo/channel-redesign/natgeo.org"))
#+END_SRC
** keyword faces
#+BEGIN_SRC emacs-lisp
  (setf org-todo-keyword-faces '(("TODO" . (:foreground "yellow" :background "red" :bold t :weight bold))
                                 ("IN PROGRESS" . (:foreground "red" :bold t :weight bold))
                                 ("STARTED" . (:foreground "cyan" :bold t :weight bold))
                                 ("DONE" . (:foreground "green" :bold t :weight bold))))
#+END_SRC
** clock settings
*** clock in todo tasks and set status
also allow clocking of non-todos
#+BEGIN_SRC emacs-lisp
  (defun bh/clock-in-to-started (kw)
    "Switch task from TODO to IN PROGRESS when clocking in"
    (if (and (string-equal kw "TODO")
             (not (string-equal (buffer-name) "*Remember*")))
        "IN PROGRESS"
      nil))
  (setq org-clock-in-switch-to-state (quote bh/clock-in-to-started))
#+END_SRC
*** auto update dynamic blocks on clock out
#+BEGIN_SRC emacs-lisp
(add-hook 'org-clock-out-hook 'org-update-all-dblocks)
#+END_SRC
*** clock into drawer
#+BEGIN_SRC emacs-lisp
(setq org-clock-into-drawer t)
#+END_SRC
*** remove empty LOGBOOK drawers on clock out
#+BEGIN_SRC emacs-lisp
(defun bh/remove-empty-drawer-on-clock-out ()
  (interactive)
  (save-excursion
    (beginning-of-line 0)
    (org-remove-empty-drawer-at "LOGBOOK" (point))))
(add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
#+END_SRC
*** always use hours for clock time summary
this makes it easier for billing
#+BEGIN_SRC emacs-lisp
  (setq org-time-clocksum-format
        '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
#+END_SRC
*** use fractional time instead of minutes
3.5 hours for example instead of 3:30
#+BEGIN_SRC emacs-lisp
  (setq org-time-clocksum-use-fractional t)
#+END_SRC
** fast todo selection
I'm not sure if this is really all that faster...
#+BEGIN_SRC emacs-lisp
(setq org-use-fast-todo-selection t)
#+END_SRC
** visual/display settings
*** indent content below headings to heading level
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC
*** hide leading stars
#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
#+END_SRC

** ido completion
#+BEGIN_SRC emacs-lisp
(setq org-completion-use-ido t)
#+END_SRC
** Stuff from emacs starter kit
*** Code blocks
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
=org-babel-load-languages= variable, or with an elisp form like the
one below.  The customize interface of =org-babel-load-languages=
contains an up to date list of the currently supported languages.
#+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (python .t)))
#+END_SRC

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

*** Code block fontification
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

** Capture
*** default capture location
#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file "~/dev/notes/refile.org")
#+END_SRC
*** capture templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        (quote (("w" "work todo" entry (file+headline "~/dev/notes/refile.org" "Work Tasks")
                 "* TODO %? %^g:WORK:\n  %T\n  %i\n  %a"))))
#+END_SRC

* Tasks
Personal stuff, ignore
** DONE clean up dump from old init
- State "DONE"       from "TODO"       [2014-08-01 Fri 16:32]
